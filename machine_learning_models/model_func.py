# -*- coding: utf-8 -*-
"""model_func.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1QvMf1nRLsKF_7IEYBMzejYWA4T9KUxC-
"""

#Import libraries
import pandas as pd
import numpy as np 
from sklearn.metrics import classification_report
from sklearn.ensemble import GradientBoostingClassifier
from xgboost import XGBClassifier
from lightgbm import LGBMClassifier
from sklearn.metrics import accuracy_score,confusion_matrix,f1_score,roc_curve, roc_auc_score, auc
from datetime import datetime
import re
import plotly.figure_factory as ff
import pickle
import plotly.express as px
from plotly.offline import init_notebook_mode, iplot, plot
import plotly as py
init_notebook_mode(connected = True)
import plotly.graph_objs as go
from plotly.subplots import make_subplots
from plotly import tools

# train_cols, decision
def fit_model(model,name,filename,X_train,y_train):
    #model = function
    print('\033[1m'+ '\033[4m' + name +'\033[0m')
    start_time = datetime.now()
    print("Start Time: {}" .format(start_time))
    model.fit(X_train,y_train)
    end_time = datetime.now() 
    print("End Time: {}" .format(end_time))
    print('Total time taken:' + '\033[1m' + str(end_time - start_time) + '\033[0m')
    pickle.dump(model, open(filename, 'wb'))


    
def c_matrix(filename, title,y_test,X_test):
    model = pickle.load(open(filename, 'rb'))
    y_pred_prob = model.predict_proba(X_test)[:, 1]
    prediction = np.where(y_pred_prob > 0.4, 1, 0)
    #prediction= model.predict(X_test) 
    print(classification_report(y_test,  prediction))
    
    #create confusion matrix 
    model_cm = confusion_matrix(y_test, prediction)
    model_cm = model_cm[::-1]
    x =  ['Predicted Absent', 'Predicted Present']
    y =  ['Present', 'Absent']
    # set up figure 
    fig = ff.create_annotated_heatmap(model_cm, x=x, y=y, colorscale='blues')

    # add title
    fig.update_layout(title_text=title, height=400, width=700)

    # adjust margins to make room for yaxis title
    fig.update_layout(margin=dict(t=50, l=200))

    # add colorbar
    fig['data'][0]['showscale'] = True
    fig.show()   

def plot_auc(filename,y_test,X_test):
    model = pickle.load(open(filename, 'rb'))   
    y_pred_prob = model.predict_proba(X_test)[:, 1]
    fpr, tpr, _ = roc_curve(y_test, y_pred_prob)

    fig = px.area(
        x=fpr, y=tpr,
        title=f'ROC Curve (AUC={auc(fpr, tpr):.4f})',
        labels=dict(x='False Positive Rate', y='True Positive Rate'),
        width=500, height=500, color_discrete_sequence=["#00acee"], 
    )
    fig.add_shape(
        type='line', line=dict(dash='dash'),
        x0=0, x1=1, y0=0, y1=1
    )
    fig.update_layout(template='plotly_white')
    fig.update_xaxes(constrain='domain')
    fig.show()   

    
def feature_importance(filename,X,title):
    model = pickle.load(open(filename, 'rb'))
    f_imp = pd.Series(model.feature_importances_, index=X.columns)
    f_imp=f_imp.nlargest(10).to_frame(name ='importance')
    f_imp.reset_index(inplace=True)
    f_imp=f_imp.sort_values('importance',ascending=True)
    fig = px.bar(x=f_imp['importance'], y=f_imp['index'],text_auto=True)
 
    fig.update_layout(title_text=title,
                  xaxis_title="Importance",yaxis_title="Features")

    fig.update_layout(template='plotly_white', width=800, height=700)

    fig.update_traces(marker_color='#00acee', marker_line_color='rgb(125, 196, 196)',
                  marker_line_width=1.5, opacity=1)
    fig.show()